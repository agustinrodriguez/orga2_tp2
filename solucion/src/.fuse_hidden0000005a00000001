global popart_asm

%define pixels_por_ciclo 15

section .rodata align = 16
	MASK_1_COLOR: DB 0x80, 0x00, 0x80, 0x03, 0x80, 0x60, 0x80, 0x90, 0x80, 0x0C, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80
	UNO: DB 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80

	;MASCARA PARA CASO 1
	MASK_1_R: DB 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
	MASK_1_B: DB 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
	MASK_1_G: DB 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80

	;MASCARA PARA CASO 2
	MASK_2_R: DB 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
	MASK_2_B: DB 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
	MASK_2_G: DB 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80

	;MASCARA PARA CASO 3
	MASK_3_R: DB 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
	MASK_3_B: DB 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
	MASK_3_G: DB 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
	
	;MASCARA PARA CASO 4
	MASK_4_R: DB 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
	MASK_4_B: DB 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
	MASK_4_G: DB 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
	
	;MASCARA PARA CASO 5
	MASK_5_R: DB 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
	MASK_5_B: DB 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
	MASK_5_G: DB 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80

section .data

section .text
;void tiles_asm(unsigned char *src, RDI
;              unsigned char *dst, RSI
;              int filas, RDX
;              int cols, RCX
;              int src_row_size, R8
;              int dst_row_size ); R9

popart_asm:
	push RBP
	mov RBP, RSP
	push R12
	push R13

	mov R12, RDX ; R12 = RDX = filas
	mov R13, RCX ; R13 = RCX = cols

	xor R10, R10 ; R10 = 0

	; Pixels a procesar = filas * cols
	; Bytes a procesar = filas * cols * 3
	mov R10D, R13D ; R10D = cols
	mov EAX, 3
	mul R10D
	mov R10D, EAX ; R10D = cols * 3
	mov EAX, R12D
	mul R10D
	mov R10D, EAX ; R10 = filas * cols * 3

	.ciclo:
		cmp R10D, 0 ; si recorri todos los bytes
		jle .fin
		movdqu XMM0, [RDI] ; xmm0(B) = | b | g | r | b | g | r | b | g | r | b | g | r | b | g | r | b |

		movdqu XMM1, XMM0 ; XMM1 = XMM0
		movdqu XMM2, XMM0 ; XMM2 = XMM0
		movdqu XMM3, XMM0 ; XMM3 = XMM0

		pshufb XMM0, [MASK_1_COLOR] ; XMM0(B) = | 0 | b | 0 | b | 0 | b | 0 | b | 0 | b | 0 | 0 | 0 | 0 | 0 | 0 |

		movdqu XMM15, [MASK_1_COLOR]
		paddb XMM15, [UNO] ; configuro la mascara para que me queden los indices en el siguiente color
		pshufb XMM1, XMM15 ; XMM1(B) = | 0 | g | 0 | g | 0 | g | 0 | g | 0 | g | 0 | 0 | 0 | 0 | 0 | 0 |

		paddb XMM15, [UNO] ; configuro la mascara para que me queden los indices en el siguiente color
		pshufb XMM2, XMM15 ; XMM2 = | 0 | r | 0 | r | 0 | r | 0 | r | 0 | r | 0 | 0 | 0 | 0 | 0 | 0 |

		; sumos los words
		paddw XMM0, XMM1 ; XMM0 = | b + g | b + g | b + g | b + g | b + g | 0 | 0 | 0 |
		paddw XMM0, XMM2 ; XMM0 = | b + g + r | b + g + r | b + g + r | b + g + r | b + g + r | 0 | 0 | 0 |
		XORPD XMM14,XMM14
		movdqu xmm15, XMM0 ; lo salvo 
		PCMPEQW XMM15, XMM14 ; COMPARO PACK A PACK SI ES MAYOR O IGUAL A CERO
		jge .chequeo

	.sigo:
		movdqu [RSI], XMM0
		add RDI, pixels_por_ciclo
		add RSI, pixels_por_ciclo
		sub R10D, pixels_por_ciclo
		jmp .ciclo


	.chequeo: 
		
		XOR R14, R14
		MOV R14,152
		XORPD XMM14, XMM14
		cvtsi2sd XMM14, R14
		SHUFPS XMm14, XMm14, 0h
		PCMPEQW XMM0, XMM2 ; COMPARO PACK A PACK SI ES MENOR O IGUAL A 152
		JLE .elPrimero
		

		XOR R14, R14
		MOV R14,305
		XORPD XMM14, XMM14
		cvtsi2sd XMM14, R14
		SHUFPS XMm14, XMm14, 0h
		PCMPEQW XMM0, XMM14 ; COMPARO PACK A PACK SI ES MENOR O IGUAL A 152
		JLE .elSegundo
		

		XOR R14, R14
		MOV R14,458
		XORPD XMM14, XMM14
		cvtsi2sd XMM14, R14
		SHUFPS XMm14, XMm14, 0h
		PCMPEQW XMM0, XMM14 ; COMPARO PACK A PACK SI ES MENOR O IGUAL A 152
		JLE .elTercero
		

		XOR R14, R14
		MOV R14,611
		XORPD XMM14, XMM14
		cvtsi2sd XMM14, R14
		SHUFPS XMm14, XMm14, 0h
		PCMPEQW XMM0, XMM14 ; COMPARO PACK A PACK SI ES MENOR O IGUAL A 152
		JLE .elCuarto


		XOR R14, R14
		MOV R14,764
		XORPD XMM14, XMM14
		cvtsi2sd XMm14, R14
		SHUFPS XMm14, XMm14, 0h
		PCMPEQW XMM0, XMM14 ; COMPARO PACK A PACK SI ES MENOR O IGUAL A 152
		JLE .elQuinto
		
	.elPrimero:
		XOR R14, R14
		MOV R14,255
		XORPD XMM13, XMM13
		cvtsi2sd XMM13, R14
		SHUFPS XMm13, XMm13, 0h
		;movdqu XMM13, [MASK_1_R] ; ACA TENDRIA |R|R|R|R|R| con r= 255
		XORPD XMM12,XMM12
		pshufb XMM13, XMM12 ; ACA TENDRIA |R|B|R|B|R|B|R|B| 
		XORPD XMM11,XMM11
		pshufb XMM13, XMM11 ;FALTARIA CHEQUEAR COMO JUNTAR ESTOS ULTIMOS
		;AHORA QUIERO JUNTARLOS
		movdqu XMM0,XMM13
		jmp .sigo
	
	.elSegundo:
		XOR R14, R14
		MOV R14,127
		XORPD XMM13, XMM13
		cvtsi2sd XMM13, R14
		SHUFPS XMm13, XMm13, 0h
		movdqu XMM11,XMM13
		XORPD XMM12,XMM12
		pshufb XMM13, XMM12 ; ACA TENDRIA |R|B|R|B|R|B|R|B| 
		pshufb XMM13, XMM11 ;FALTARIA CHEQUEAR COMO JUNTAR ESTOS ULTIMOS
		;AHORA QUIERO JUNTARLOS
		movdqu XMM0,XMM13
		jmp .sigo

	.elTercero:
		XOR R14, R14
		MOV R14,255
		XORPD XMM13, XMM13
		cvtsi2sd XMM13, R14
		SHUFPS XMm13, XMm13, 0h
		movdqu XMM11, XMM13
		XORPD XMM12,XMM12
		pshufb XMM13, XMM12 ; ACA TENDRIA |R|B|R|B|R|B|R|B| 
		pshufb XMM13, XMM11 ;FALTARIA CHEQUEAR COMO JUNTAR ESTOS ULTIMOS
		;AHORA QUIERO JUNTARLOS
		movdqu XMM0,XMM13
		jmp .sigo

	.elCuarto:
		XOR R14, R14
		MOV R14,255
		XORPD XMM11, XMM11
		cvtsi2sd XMM11, R14
		SHUFPS XMm11, XMm11, 0h
		XORPD XMM13,XMM13
		XORPD XMM12,XMM12
		pshufb XMM13, XMM12 ; ACA TENDRIA |R|B|R|B|R|B|R|B| 
		pshufb XMM13, XMM11 ;FALTARIA CHEQUEAR COMO JUNTAR ESTOS ULTIMOS
		;AHORA QUIERO JUNTARLOS
		movdqu XMM0,XMM12
		jmp .sigo

	.elQuinto:
		XORPD XMM13,XMM13
		XOR R14, R14
		MOV R14,255
		XORPD XMM12, XMM12
		cvtsi2sd XMM12, R14
		SHUFPS XMm12, XMm12, 0h
		movdqu XMM11, XMM12
		pshufb XMM13, XMM12 ; ACA TENDRIA |R|B|R|B|R|B|R|B| 
		pshufb XMM12, XMM11 ;FALTARIA CHEQUEAR COMO JUNTAR ESTOS ULTIMOS
		;AHORA QUIERO JUNTARLOS
		movdqu XMM0,XMM12
		jmp .sigo

	.fin:
	pop R13
	pop R12
	pop RBP
    ret
